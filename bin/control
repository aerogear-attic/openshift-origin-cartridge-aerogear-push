#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

WILDFLY_BIN_DIR=${OPENSHIFT_AEROGEAR_PUSH_DIR}/bin
WILDFLY_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/aerogear_push.pid
WILDFLY_STANDALONE_DIR=${OPENSHIFT_AEROGEAR_PUSH_DIR}/standalone
WILDFLY_DEPLOYMENTS_DIR=${OPENSHIFT_AEROGEAR_PUSH_DIR}/standalone/deployments
SCANCONFIG=""
DEPLOYMENT_SCAN_RETRIES=4

source $WILDFLY_BIN_DIR/util

cartridge_type="aerogear-push"

# Return the deployment-scanner configuration
function getscanconfig() {
    count=0
    while [ ${count} -lt ${DEPLOYMENT_SCAN_RETRIES} ]; do
      controller="${OPENSHIFT_AEROGEAR_PUSH_IP}:${OPENSHIFT_AEROGEAR_PUSH_MANAGEMENT_HTTP_PORT}"
      scanconfig=`$OPENSHIFT_AEROGEAR_PUSH_DIR/bin/tools/jboss-cli.sh -c --controller=${controller} "/subsystem=deployment-scanner/:read-resource(recursive=true)" 2>&1 || :`
      if [[ $scanconfig =~ '"outcome" => "success"' ]] ; then
        SCANCONFIG=$scanconfig
        return
      fi
      let count+=1

      sleep 2
    done
}

# Verify that the deployment scanner has finished running
function waitondeployments() {
    if ! ismgmtup; then
      client_message "Timed out waiting for management listening port"
      client_message "Could not connect to WildFly management interface, skipping deployment verification"
    else
      getscanconfig

      if [ "$SCANCONFIG" == "" ]; then
        client_message "Could not connect to WildFly management interface, skipping deployment verification"
      elif [[ $SCANCONFIG =~ '"scan-enabled" => true' ]]; then
        pushd $WILDFLY_DEPLOYMENTS_DIR

        artifacts=()
        while read -r -d $'\0'; do
          artifacts+=("$REPLY")
        done < <(find . -iregex '.*\.\([ejrsw]ar\|zip\)$' -print0)

        deployexploded=false
        if [[ $SCANCONFIG =~ '"auto-deploy-exploded" => true' ]]; then
          deployexploded=true
        fi
        deployarchive=false
        if [[ $SCANCONFIG =~ '"auto-deploy-zipped" => true' ]]; then
          deployarchive=true
        fi

        artifactsdeployed=()
        artifactsfailed=()
        artifactsskipped=()
        artifactsunknown=()
        for artifact in ${artifacts[*]}; do
          if ( [ -f $artifact ] && $deployarchive ) || ( [ -d $artifact ] && $deployexploded ); then
            # TODO triple check this logic, add a timeout
            while [ -f ${artifact}.isdeploying ]; do
              client_message "Artifact: ${artifact} is still deploying"
              sleep 10
            done

            if [ -f ${artifact}.deployed ]; then
              artifactsdeployed+=($artifact)
            elif [ -f ${artifact}.failed ]; then
              artifactsfailed+=($artifact)
            else
              artifactsunknown+=($artifact)
            fi

          else
            # artifact skipped because of deployment scanner config
            artifactsskipped+=($artifact)
          fi
        done

        popd

        if [ ${#artifactsskipped[@]} -gt 0 ]; then
          client_message "Artifacts skipped because of deployment-scanner configuration: ${artifactsskipped[*]}"
        fi

        if [ ${#artifactsfailed[@]} -gt 0 ]; then
          client_message "Failed deployments: ${artifactsfailed[*]}"
        fi

        if [ ${#artifactsdeployed[@]} -gt 0 ]; then
          client_message "Artifacts deployed: ${artifactsdeployed[*]}"
        fi

        if [ ${#artifactsunknown[@]} -gt 0 ]; then
          client_message "Artifacts in an unknown state: ${artifactsunknown[*]}"
        fi
      else
          client_message "Deployment scanner disabled, skipping deployment verification"
      fi
    fi
}

# Check if the wildfly process is running
function isrunning() {

    # Check for running app
    if [ -f "$WILDFLY_PID_FILE" ]; then
      wfpid=$(cat $WILDFLY_PID_FILE);
      if /bin/ps --pid $wfpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi

    return 1
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z "$should_be_gone_pid" ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

# Check if the server http port is up
function ishttpup() {
    let count=0
    while [ ${count} -lt 64 ]
    do
        if echo 2> /dev/null > "/dev/tcp/${OPENSHIFT_AEROGEAR_PUSH_IP}/${OPENSHIFT_AEROGEAR_PUSH_HTTP_PORT}"; then
            echo "Found ${OPENSHIFT_AEROGEAR_PUSH_IP}:${OPENSHIFT_AEROGEAR_PUSH_HTTP_PORT} listening port"
            return 0
        fi
        # if the process failed to start, error out immediately
        # rather than waiting for the timeout on the port being available.
        wpid=$(cat $WILDFLY_PID_FILE);
        if ! ps | grep -v grep | grep $wpid > /dev/null; then
          return 2
        fi

        let count=${count}+1

        sleep 2
    done

    return 1
}

# Check if the server mgmt port is up
function ismgmtup() {
    let count=0
    while [ ${count} -lt 64 ]
    do
        if echo 2> /dev/null > "/dev/tcp/${OPENSHIFT_AEROGEAR_PUSH_IP}/${OPENSHIFT_AEROGEAR_PUSH_MANAGEMENT_HTTP_PORT}"; then
            echo "Found ${OPENSHIFT_AEROGEAR_PUSH_IP}:${OPENSHIFT_AEROGEAR_PUSH_MANAGEMENT_HTTP_PORT} listening port"
            return 0
        fi
        let count=${count}+1

        sleep 2
    done

    return 1
}

function build() {
  CONFIG_DIR="${OPENSHIFT_AEROGEAR_PUSH_DIR}/standalone/configuration"
  OPENSHIFT_MAVEN_MIRROR="${CONFIG_DIR}/settings.base.xml"
  if [[ $OPENSHIFT_GEAR_DNS =~ .*\.rhcloud\.com$ ]]
  then
      OPENSHIFT_MAVEN_MIRROR="${CONFIG_DIR}/settings.rhcloud.xml"
  fi

  max_memory_bytes=$(oo-cgroup-read memory.limit_in_bytes)
  max_memory_mb=$(expr $max_memory_bytes / 1048576)

  # If hot deploy is enabled, we need to restrict the Maven memory size to fit
  # alongside the running application server. For now, just hard-code it to 64
  # and figure out how to apply a scaling factor later.
  if marker_present hot_deploy
    then
      echo "Scaling down Maven heap settings due to presence of hot_deploy marker"

      if [ -z "$MAVEN_JVM_HEAP_RATIO" ]
        then
        MAVEN_JVM_HEAP_RATIO=0.25
    fi
  else
    if [ -z "$MAVEN_JVM_HEAP_RATIO" ]
        then
      MAVEN_JVM_HEAP_RATIO=0.75
    fi
  fi

  max_heap=$( echo "$max_memory_mb * $MAVEN_JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')

  OPENSHIFT_MAVEN_XMX="-Xmx${max_heap}m"

  if [ -z "$BUILD_NUMBER" ]
  then
      if marker_present force_clean_build
      then
          echo ".openshift/markers/force_clean_build found!  Removing Maven dependencies." 1>&2
          rm -rf ${OPENSHIFT_HOMEDIR}.m2/* ${OPENSHIFT_HOMEDIR}.m2/.[^.]*
      fi

      if [ -f ${OPENSHIFT_REPO_DIR}pom.xml ] && ! marker_present skip_maven_build
      then
          update-configuration

          export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          export PATH=$JAVA_HOME/bin:$M2_HOME/bin:$PATH
          pushd ${OPENSHIFT_REPO_DIR} > /dev/null

          if [ -z "$MAVEN_OPTS" ]; then
            export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          fi

          if [ -z "$MAVEN_ARGS" ]; then
          export MAVEN_ARGS="clean package -Popenshift -DskipTests"
          fi

          echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

          if [ -n "$OPENSHIFT_MAVEN_MIRROR" ]
          then
              $OPENSHIFT_AEROGEAR_PUSH_DIR/bin/tools/mvn --global-settings $OPENSHIFT_MAVEN_MIRROR --version
              $OPENSHIFT_AEROGEAR_PUSH_DIR/bin/tools/mvn --global-settings $OPENSHIFT_MAVEN_MIRROR $MAVEN_ARGS
          else
              $OPENSHIFT_AEROGEAR_PUSH_DIR/bin/tools/mvn --version
              $OPENSHIFT_AEROGEAR_PUSH_DIR/bin/tools/mvn $MAVEN_ARGS
          fi
          popd > /dev/null
      fi
  fi

}

function deploy() {
  echo "Deploying WildFly"

  # Skip deployments sync when there is no deployment directory
  if [ ! -d "${OPENSHIFT_REPO_DIR}deployments" ]; then
    echo "WARNING: The ./deployments directory not found, skipping sync."
    return
  fi

  # if repo/deployments has any files in it, sync them to $WILDFLY_DEPLOYMENTS_DIR
  # and delete any files in $WILDFLY_DEPLOYMENTS_DIR that don't exist in
  # repo/deployments
  if [ "$(ls ${OPENSHIFT_REPO_DIR}/deployments)" ]; then
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/deployments/ $WILDFLY_DEPLOYMENTS_DIR
  fi
}

function start() {
  echo "Starting $cartridge_type cart"

  if marker_present "enable_jpda"
  then
    export ENABLE_JPDA=1
  fi

  # Check for running app
  if isrunning; then
      echo "Application is already running"
  else
    ${OPENSHIFT_AEROGEAR_PUSH_DIR}/usr/lib/migrator/bin/ups-migrator --url=jdbc:mysql://${OPENSHIFT_MYSQL_DB_HOST}:${OPENSHIFT_MYSQL_DB_PORT}/${OPENSHIFT_APP_NAME} --driver=com.mysql.jdbc.Driver --username=${OPENSHIFT_MYSQL_DB_USERNAME} --password=${OPENSHIFT_MYSQL_DB_PASSWORD} --changeLogFile=liquibase/master.xml update > $OPENSHIFT_AEROGEAR_PUSH_DIR/logs/migration.log 2>&1
    ${WILDFLY_BIN_DIR}/standalone.sh -b $OPENSHIFT_AEROGEAR_PUSH_IP -bmanagement=$OPENSHIFT_AEROGEAR_PUSH_IP > $OPENSHIFT_AEROGEAR_PUSH_DIR/logs/server.log 2>&1 &
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${WILDFLY_PID_FILE}

    rc=0
    ishttpup || rc=$?
    if [ $rc -eq 1 ]; then
      echo "Timed out waiting for http listening port for $cartridge_type process"
      exit 1
    elif [ $rc -eq 2 ]; then
      echo "$cartridge_type process failed to start"
      exit 2
    fi

    waitondeployments
  fi
}


function stop() {
  echo "Stopping $cartridge_type cart"

  if isrunning; then
    if [ -f "$WILDFLY_PID_FILE" ]; then
      pid=$(cat $WILDFLY_PID_FILE);
      echo "Sending SIGTERM to wildfly:$pid ..." 1>&2
      killtree $pid
    else
      echo "Failed to locate WildFly PID File" 1>&2
    fi
  fi
}

function restart() {
    echo "Restarting $cartridge_type cart"

    stop

    start
}

function status() {
   if isrunning
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}

function reload() {
    echo "Reloading $cartridge_type cart"
    restart
}

# Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_AEROGEAR_PUSH_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_AEROGEAR_PUSH_LOG_DIR/*
}

function threaddump() {
  echo "Thread dump for $cartridge_type cart"

    if ! isrunning; then
        echo "Application is stopped"
        exit 1
    elif [ -f "$WILDFLY_PID_FILE" ]; then
        pid=$(cat $WILDFLY_PID_FILE);
        java_pid=$(ps h --ppid $pid -o '%p')
        kill -3 $java_pid
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -f ${OPENSHIFT_TMP_DIR}${cartridge_type}.log -o '-n 250'"
    else
        echo "Failed to locate WildFly PID File"
    fi
}

function pre_snapshot {
  start
  echo "$OPENSHIFT_AEROGEAR_PUSH_TOKEN_KEY" > $OPENSHIFT_DATA_DIR/aerogear_push_token_key
  cp $OPENSHIFT_AEROGEAR_PUSH_DIR/standalone/configuration/standalone.xml $OPENSHIFT_DATA_DIR/standalone.snapshot.xml
  stop
}

function post_snapshot {
  true
}

function pre_restore {
  cleanup_dump
}

function post_restore {
  if [ -s $OPENSHIFT_DATA_DIR/aerogear_push_token_key ]; then
    TOKEN_KEY=$(< $OPENSHIFT_DATA_DIR/aerogear_push_token_key)
    echo $TOKEN_KEY > $OPENSHIFT_AEROGEAR_PUSH_DIR/env/OPENSHIFT_AEROGEAR_PUSH_TOKEN_KEY
    sed -i "s/<server socket-binding=\"simplepush\"\(.*\) password=\"[^\"]\+\"/<server socket-binding=\"simplepush\"\1 password=\"$TOKEN_KEY\"/" $WILDFLY_STANDALONE_DIR/configuration/standalone.xml > /dev/null 2>&1
  fi

  if [ -s $OPENSHIFT_DATA_DIR/standalone.snapshot.xml ]; then
    cp $OPENSHIFT_DATA_DIR/standalone.snapshot.xml $OPENSHIFT_AEROGEAR_PUSH_DIR/standalone/configuration/standalone_xml_history/snapshot/standalone.snapshot.xml
  fi

  cleanup_dump
}

function cleanup_dump {
  rm -f $OPENSHIFT_DATA_DIR/aerogear_push_token_key
  rm -f $OPENSHIFT_DATA_DIR/standalone.snapshot.xml
}


case "$1" in
  build)           build ;;
  deploy)          deploy ;;
  start)           start ;;
  stop)            stop ;;
  restart)         restart ;;
  status)          status ;;
  reload)          reload ;;
  tidy)            tidy ;;
  threaddump)      threaddump ;;
  update-configuration) update-configuration;;
  pre-snapshot)    pre_snapshot ;;
  post-snapshot)   post_snapshot ;;
  pre-restore)     pre_restore ;;
  post-restore)    post_restore ;;  
  *)               exit 0
esac

